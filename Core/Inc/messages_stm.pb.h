/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_MESSAGES_STM_PB_H_INCLUDED
#define PB_MESSAGES_STM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
/* *
 Mensagem com dado de medição de um sensor de energia 
 Mensagem utilizada pelo sensor para report ao hub principal
 @param v_rms {number} valor de tensão rms
 @param i_rms {number} valor de corrente rms
 @param pot_ativa {number} potencia ativa registrada
 @param pot_aparente {number} potencia aparente registrada
 @param samples {number} numero de amostars coletadas no periodo (1 amostra por segundo) */
typedef struct _EnergySensorReport { 
    double v_rms; 
    double i_rms; 
    int32_t pot_ativa; 
    int32_t pot_aparente; 
    int32_t samples; 
} EnergySensorReport;

/* *
 Mensagem para pareamento de Hub com Sensor

 @param serial {string} serial de utilizado para definir endereço do pipe
 @param channel {number} canal onde será mantida a comunicação */
typedef struct _PairingMessage { 
    char serial[10]; 
    int32_t channel; 
} PairingMessage;

/* *
 Mensagem com dado de medição de um sensor de aguá 
 Mensagem utilizada pelo sensor para report ao hub principal
 @param samples {number} numero de amostras coletadas em 1 segundo
 @param instant {number} valor do fluxo de aguá instanteneo em mL */
typedef struct _WaterSensorReport { 
    int32_t samples; 
    double instant; 
} WaterSensorReport;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define WaterSensorReport_init_default           {0, 0}
#define EnergySensorReport_init_default          {0, 0, 0, 0, 0}
#define PairingMessage_init_default              {"", 0}
#define WaterSensorReport_init_zero              {0, 0}
#define EnergySensorReport_init_zero             {0, 0, 0, 0, 0}
#define PairingMessage_init_zero                 {"", 0}

/* Field tags (for use in manual encoding/decoding) */
#define EnergySensorReport_v_rms_tag             1
#define EnergySensorReport_i_rms_tag             2
#define EnergySensorReport_pot_ativa_tag         3
#define EnergySensorReport_pot_aparente_tag      4
#define EnergySensorReport_samples_tag           5
#define PairingMessage_serial_tag                1
#define PairingMessage_channel_tag               2
#define WaterSensorReport_samples_tag            1
#define WaterSensorReport_instant_tag            2

/* Struct field encoding specification for nanopb */
#define WaterSensorReport_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    samples,           1) \
X(a, STATIC,   SINGULAR, DOUBLE,   instant,           2)
#define WaterSensorReport_CALLBACK NULL
#define WaterSensorReport_DEFAULT NULL

#define EnergySensorReport_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, DOUBLE,   v_rms,             1) \
X(a, STATIC,   SINGULAR, DOUBLE,   i_rms,             2) \
X(a, STATIC,   SINGULAR, INT32,    pot_ativa,         3) \
X(a, STATIC,   SINGULAR, INT32,    pot_aparente,      4) \
X(a, STATIC,   SINGULAR, INT32,    samples,           5)
#define EnergySensorReport_CALLBACK NULL
#define EnergySensorReport_DEFAULT NULL

#define PairingMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   serial,            1) \
X(a, STATIC,   SINGULAR, INT32,    channel,           2)
#define PairingMessage_CALLBACK NULL
#define PairingMessage_DEFAULT NULL

extern const pb_msgdesc_t WaterSensorReport_msg;
extern const pb_msgdesc_t EnergySensorReport_msg;
extern const pb_msgdesc_t PairingMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define WaterSensorReport_fields &WaterSensorReport_msg
#define EnergySensorReport_fields &EnergySensorReport_msg
#define PairingMessage_fields &PairingMessage_msg

/* Maximum encoded size of messages (where known) */
#define EnergySensorReport_size                  51
#define PairingMessage_size                      22
#define WaterSensorReport_size                   20

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
